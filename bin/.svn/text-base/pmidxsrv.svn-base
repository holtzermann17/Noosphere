#!/usr/bin/perl
# pmidxd - Noosphere term index daemon
#          Currently used to handle on-line term indexing.  Handles one client
#          at a time, so access is serialized and we dont have to duplicate
#          the potentially large list of terms across processes.

use lib '/var/www/noosphere/lib';
use Noosphere qw($dbh $DEBUG);
use Noosphere::DB;
use Noosphere::Config;
use Noosphere::Crossref;
use Noosphere::Encyclopedia;
use Noosphere::Util;
use Noosphere::Indexing;
use Tie::SortHash;
use DBI();
use IO::Socket;
use Net::hostent;
use POSIX;
use POSIX ":sys_wait_h";

$DEBUG=0;

#daemonize();

# the index
#
my $index;

# start off by connecting to the db
#
die "Couldn't open database: ",$DBI::errstr unless ($dbh=Noosphere::dbConnect());

#print "database handle $dbh";

# build the index, make it always-sorted
#
$index=makeIndex();
wordIndexEntries();

exit;

# start the server
#
my $server=undef;

$server=IO::Socket::INET->new (Proto => 'tcp', 
                               LocalPort => Noosphere::getConfig('idxsrv_port'), 
							   Listen => SOMAXCONN, 
							   Reuse => 1);

die "couldn't start server!" unless $server;

my $client;
while ($client = $server->accept()) {

  print "client connected";
  $client->autoflush(1);
  my $command;
  print $client "> ";
  while ($command=<$client>) {
    if ($command=~/^print\s*/) {
      foreach my $title (keys %$index) {
        print $client "$title => $index->{$title}\n";
      }
	  print $client "\n".(scalar keys %$index)." entries.\n\n";
	} elsif ($command=~/^count\s*/) {
	  print $client "\n".(scalar keys %$index)." entries.\n\n";
	} elsif ($command=~/^quit\s*/) {
      $client->close();
	  last;
	} elsif ($command=~/^shutdown\s+(\w+)/) {
	  if ($1 eq Noosphere::getConfig('daemonpw')) {
        exit;
	  } else {
	    print $client "Need correct password.\n";
	  }
	} elsif ($command=~/^add\s+\"(.*)\"\s+(\w+)/) {
	  $index->{"$1"}=$2;
      print $client "entry added.\n";
	} elsif ($command=~/^(help|\?)\s*/) {
	  print $client "\nNoosphere Index Server Commands\n\n";
	  print $client "print\n";
	  print $client "count\n";
	  print $client "add \"<title>\" <name>\n";
	  print $client "match <word>\n";
	  print $client "crossref <text>\n";
	  print $client "shutdown <pw>\n";
	  print $client "quit\n";
      print $client "\n";
	}
	print $client "> ";
  }	
  $client->close();
}

##############################################################################
#                                    subs
##############################################################################

# build the word index table for all entries
#
sub wordIndexEntries { 
  my ($rv,$sth)=Noosphere::dbSelect($dbh,{WHAT=>'uid,title,keywords,synonyms,data',FROM=>Noosphere::getConfig('en_tbl'),WHERE=>Noosphere::whereEnUserTypes});

  while (my $row=$sth->fetchrow_hashref()) {
    wordIndexEntry($row);
  }
}

# wrapper for Noosphere function to build the index. ties it to sort.
#
sub makeIndex {
  my $index=Noosphere::generateterms();
  tie %$index, 'Tie::SortHash', $index, q(lc($a) cmp lc($b));
  #print "built the index\n\n";
  #foreach my $title (keys %$index) {
  #  print "$title => $index->{$title}\n";
  #}
  
  return $index;
}

# daemonize, shamelessly ripped from www.perldoc.com IPC tutorial
# 
sub daemonize {
	chdir '/'				or die "Can't chdir to /: $!";
	open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
	open STDOUT, '>/dev/null'
	or die "Can't write to /dev/null: $!";
	defined(my $pid = fork)	or die "Can't fork: $!";
	exit if $pid;
	setsid					or die "Can't start a new session: $!";
	open STDERR, '>&STDOUT'	or die "Can't dup stdout: $!";
}  

