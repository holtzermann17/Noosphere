#!/usr/bin/perl


#use LaTeX::TOM;
use Data::Dumper;
use HTML::Entities;
use Cwd;
use File::Basename;

$timeout = 120; # seconds until render call is considered locked

#writing my own math mode latex parser
#
foreach my $f (@ARGV) {
	runme($f);
}

sub runme {
	my $filename = shift;
#my $parser = new LaTeX::TOM->new(0,0,1);
my $latexsource = `texexpand $filename`;
$latexsource =~ s/\\\[/\$\$/g;
$latexsource =~ s/\\\]/\$\$/g;
#my $document = $parser->parse($latexsource);
#print Dumper ($parser->{USED_COMMANDS});
#print "parsing done";
#$latexsource = $document->toLaTeX;
#
print STDERR "After parsing:\n$latexsource\n";

#build the jsMath macros for user defined commands

#This is the form of newcommand:
#\newcommand{\ad}{\mathrm{ad}}
#
#\newcommand{\Aff}[2]{	\mathrm{Aff}_{#1} #2}
#\def\Bset{\mathbb{B}}
#% \frac overwrites LaTeX's one (use TeX \over instead)
#%def\fraq#1#2{{}^{#1}\!/\!{}_{\,#2}}
#\def\frac#1#2{\mathord{\mathchoice%
#{\T{#1\over#2}}
#{\T{#1\over#2}}
#{\S{#1\over#2}}
#{\SS{#1\over#2}}}}
#%def\half{\frac12}


# we need to genereate the jsMath javacript code

my $commands = "";
while ( $latexsource =~ /\\newcommand{(.*)}(\[\d+\])?{(.*)}/g ) {
	my $command = $1;
	my $num = $2;
	my $content = $3;
	$num =~ s/\[//g;
	$num =~ s/\]//g;
	$content =~ s/\\/\\\\/g;
	print STDERR "defining '$command' '$num' '$content'\n";
	$command =~ s/^\\//;
	$num = 0 if ( $num eq '' );
	$commands .= "<SCRIPT> jsMath.Macro( '$command', '$content', $num) </SCRIPT>\n";
}

my @chars = split( //, $latexsource );


#\( (?:\?[:=!]|\?<[=!]|\?>)? (?R)?? \) 
#
# The code below cannot be done because regexp can't detect arbitrary nested braces.
#  It may be possible hardcode about 10 or so nested braces by hand and see if it would
#  work for most cases. We need a stack to count.
#
#while ( $latexsource =~ /\\def\\([^#]+)([^{]+(\d+)?({ (?:\?[:=!]|\?<[=!]|\?>)? (?R)?? })/g;) {
#	my $command = $1;
#	my $num = $2;
#	my $nummaybe = $3;
#	my $content = $4;
#	print "$1\n$2\n$3\n$4\n";
#}





my @matharray = ();
my $mathcnt = 0;



my @results = ();
my @tokens = split( /(\W)/ , $latexsource );
for (my $i = 0; $i < $#tokens+1; $i++ ) { 
	if ( $tokens[$i] eq '' ) {
		splice( @tokens, $i, 1);
	}
}

# these commands switch out of math mode.
#(\\textrm|\\textsl|\\textit|\\texttt|\\textbf|\\text|\\hbox)

my $j = 0;
my $mathcontent = "";
for (my $i = 0; $i < $#tokens+1; $i++) {
	if ( $tokens[$i] eq '$' ) {
		$mathcontent = "";
		if ( $tokens[$i+1] eq '$' ) {
#	print "found begin of newline \$\$\n";
		#this is seperate line math mode;
			for( $j=$i+2; $j < $#tokens+1; $j++ ) {
				if ( $tokens[$j] eq '$' && $tokens[$j+1] eq '$' ) {
#					print "found end of \$\$\n";
					last;
				}
				$mathcontent .= $tokens[$j];
			}
			$i = $j+1;
			$mathcontent = "\$\$$mathcontent\$\$";
		} else {
		#this is inline math mode;
#			print "found begin of inline \$\n";
			my $waitForBrace = 0;
			for( $j=$i+1; $j < $#tokens+1; $j++ ) {
				if ( $tokens[$j] eq "\\" && $tokens[$j+1] =~ /(textrm|textsl|textit|texttt|textbf|text|hbox)/ ) {
						my $numlbrace = 0;
						my $k = $j+2;
						for ( $k = $j+2; $k < $#tokens+1; $k++ ) {
							$mathcontent .= $tokens[$k];
							if ( $tokens[$k] eq '{' ) {
								$numlbrace++;	
							} elsif ( $tokens[$k] eq '}' ) {
								$numlbrace--;	
								if ( $numlbrace == 0 ) {
									last;
								}
							}
						}
						$j = $k+1;
				}

				if ( $tokens[$j] eq '$') {
#print "found end of \$\n";
					last;
				}
				$mathcontent .= $tokens[$j];
			}
			$i = $j+1;
			$mathcontent = "\$$mathcontent\$";
		}
#		print "Storing math: [$mathcontent]\n";
		$matharray[$mathcnt] = $mathcontent;
		push @results, "JG-" . $mathcnt++ . "-JG ";
	} elsif ($tokens[$i] eq "\\" && $tokens[$i+1] !~ /htmladdn/)  {
		my $text = join( '', @tokens[$i..($i+4)] );
		my $j = 0;
		if ( $text =~ /eqnarray/ || $text=~ /equation/ || $text =~ /align/ ) {
#			print "begin equation type environment\n";
#			print "[$text]\n";
			$mathcontent = $text;
			for ( $j = $i+5; $j < $#tokens+1; $j++ ) {
				$text = join( '', @tokens[$j..($j+4)] );
				if ( $text =~ /end{eqnarray.*}/ ||  $text =~ /end{equation.*}/ || $text =~ /end{align.*}/ ) {
#			print "end equation type environment\n";
						$mathcontent .= $text;
						last;
				} else {
					$mathcontent .= $tokens[$j];
				}
			}
			$matharray[$mathcnt] = $mathcontent;
			push @results, "JG-" . $mathcnt++ . "-JG";
			$i = $j+5;
		} else {
			push @results, $tokens[$i];
		}
#handle environments
	} else {
		push @results, $tokens[$i];
	}
}
#foreach my $r ( @results ) {
#	print "[$r]\n";
#}
#print STDERR Dumper( \@matharray );
my $preprocessedTex = join( '', @results );

$filename =~ s/\.tex/-pre.tex/;
open ( OUT, ">$filename" );
#open ( OUT, ">./temp/$filename" );
print OUT $preprocessedTex;
close OUT;
#chdir(  "./temp/" );

#`latex \"$filename\"`;
#`bibtex \"$short\"`;
#`latex \"$filename\"`;
#`latex \"$filename\"`;
# we need to change to the correct directory.
my $dir = dirname( $filename );
my $currentdir = `pwd`;
chdir "$dir";
`ulimit -t $timeout ; latex2html "$filename"`;
chdir "$currentdir";


open( IN, "index.html" );
my $html = ""; 
while ( <IN> ) {
	$html .= $_;
}
close( IN );

for (my $i=0; $i < $#matharray+1; $i++ ){
	my $math = $matharray[$i];
	encode_entities($math, q{<>&"'});
	$html =~ s/JG-$i-JG/<SPAN class=\"nolink\">$math<\/SPAN>/g;
}
#my $script = "<SCRIPT SRC=\"http://images.planetmath.org:8089/jsMath/easy/load.js\"></SCRIPT>";

$html =~ s/<body.*?>/<body>$commands/i;




open( OUT , ">index.html" );
print OUT $html;
close( OUT );
#chdir ( "..");
}
