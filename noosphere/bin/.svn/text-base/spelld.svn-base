#!/usr/bin/perl

use DBI;
use lib '/var/www/noosphere/lib';
use Noosphere qw($dbh $DEBUG);
use Noosphere::DB;
use Noosphere::Config;
use Noosphere::Util;
use IO::Socket;
use Net::hostent;
use POSIX;
use POSIX ":sys_wait_h";

use vars qw{@lexicon %reverse %ngramidx};

# @lexicon is the dictionary array
# %reverse is the hash storing word -> dict id
# %ngramidx is the n-gram index

# n-gram index configuration
#
use constant NGSIZE=>3;    # gram size (the 'n' in 'n-gram')

# edit distance weights
#
use constant WD=>1;        # deletion/insertion
use constant WR=>1;        # replacement
use constant WE=>0;        # match

# start the server
#
my $server=undef;

$server=IO::Socket::INET->new (Proto => 'tcp',
                               LocalPort => Noosphere::getConfig('spell_port'),
							   Listen => SOMAXCONN,Reuse => 1);

die "couldn't start server!" unless $server;

print "\n";

$SIG{CHLD} = \&REAPER;
$SIG{HUP} = \&REBUILD;

# write out my process id
#
open RUNFILE, ">/var/www/noosphere/bin/run/spelld.pid";
print RUNFILE $$;
close RUNFILE;

my ($lexicon,$reverse,$ngramidx)=build();

#print "enter in a string of words to look up. 'stop' to quit.\n\n";

my $client;
while ($client = $server->accept()) {
  print "client connected\n";
 
  my $pid;
  if (!defined($pid = fork)) {     # error
	print "cannot fork: $!\n";    
  } elsif ($pid) {                 # parent
    print "begat $pid\n";
  } else {
    # else I'm the child -- go spawn
	#
    #open(STDIN,  "<&Client")   || die "can't dup client to stdin";
    #open(STDOUT, ">&Client")   || die "can't dup client to stdout";
    ## open(STDERR, ">&STDOUT") || die "can't dup stdout to stderr";
    #exit &$coderef();
									
    $client->autoflush(1);
  
    while (my $input=<$client>) {

      $input=~s/\s*$//;
      $input=~s/^\s*//;

      if ($input=~/^stop\s+(.+)/) {
	    if ($1 eq Noosphere::getConfig('daemonpw')) {
          exit 999; 
		}
      } 
	
	  elsif ($input=~/^rebuild\s+(.+)/) {
	    if ($1 eq Noosphere::getConfig('daemonpw')) {
          ($lexicon,$reverse,$ngramidx)=build();
		}
      }

      else {
        my $response=check($lexicon,$reverse,$ngramidx,$input);
	    print $client "$response\n";
      } 
    }
   
	print "client disconnected.\n";
    $client->close();
	exit;
  }

};

###############################################################################

sub REAPER {
  my $waitedpid = wait;
  $SIG{CHLD} = \&REAPER;  # loathe sysV
  print "reaped $waitedpid" . ($? ? " with exit $?\n" : "\n");
  exit 999 if ($? == 59136);  # shut down if we got a close signal
}

sub REBUILD {

  ($lexicon,$reverse,$ngramidx)=build();
}

# check a sentence, return a corrected string
#
sub check {
  my $lexicon=shift;
  my $reverse=shift;
  my $ngramidx=shift;
  my $input=shift;

  my $response="";

  foreach my $word (split(/\s+/,$input)) {

    if (defined $reverse->{lc($word)}) {
      $response.="+ ";
    } else {
	  my $tophash=mergepostings($ngramidx,$word);
	  my $count=scalar keys %$tophash;
	  #print "  ($word: got $count first-cut possibilities)\n";	
	  my ($dist,@winners)=getwinners1($lexicon,$tophash,$word);
	  if ($#winners == 0) {
	    #print "  word=>$lexicon->[$winners[0]]?\n";
	    $response.="$lexicon->[$winners[0]] ";
	  } else {
	    #printwinners($lexicon,\@winners,$dist,$word);
	    ($dist,@winners)=getwinners2($lexicon,\@winners,$word);
	    $count=scalar @winners;
	    #print "  ($word: got $count second-cut possibilities)\n";
	    if ($#winners == 0) {
	      #print "  $word=>$lexicon->[$winners[0]]?\n";
	      $response.="$lexicon->[$winners[0]] ";
	    } else {
	      #printwinners($lexicon,\@winners,$dist,$input);
		  #print "  no suggestions.";
		  $response.="- ";
	    }
	  }
	}
  }

  return $response;
}

sub build {
  
  my @lexicon;
  my %reverse;
  my %ngramidx;

  my $dbh = Noosphere::dbConnect;
  my $nametbl = Noosphere::getConfig('index_tbl');
  
  my ($rv,$sth) = Noosphere::dbSelect($dbh,{WHAT=>'title',FROM=>$nametbl});

  # generate the lexicon 
  #
  print "generating lexicon...\n";
  my $i = 0;
  while (my $row = $sth->fetchrow_hashref()) {
    #print "adding $row->{title}\n";
    addtitle(\@lexicon,\%reverse,$row->{title});
    $i++;
  }
  $sth->finish();

  ($rv,$sth) = Noosphere::dbSelect($dbh,{WHAT=>'comment',FROM=>'msc'});
  while (my $row = $sth->fetchrow_hashref()) {
    #print "adding $row->{title}\n";
    addtitle(\@lexicon,\%reverse,$row->{comment});
    $i++;
  }
  $sth->finish();

  # build the n-gram inverted index
  #
  print "generating n-gram index...\n";
  foreach my $word (@lexicon) {
    indexngrams(\%ngramidx,\%reverse,$word);
  }

  my $nngrams = scalar keys %ngramidx;

  print "\n";

  print "$i terms total\n";
  print "$#lexicon words in lexicon\n";
  print "$nngrams unique ".NGSIZE()."-grams\n";

  $dbh->disconnect();

  return ([@lexicon],{%reverse},{%ngramidx});
}

sub printwinners {
  my $lexicon = shift;     # the lexicon
  my $winners = shift;     # winner id list
  my $dist = shift;        # winning distance
  my $reference = shift;   # reference string

  foreach my $id (@$winners) {
    my $ld = lengthdiff($lexicon->[$id],$reference);
    my $lev = edist($lexicon->[$id],$reference);
    print "  possible match: dist=$dist ($lexicon->[$id] ($id), ld=$ld, lev=$lev)\n";
  }
}
# absolute value of length diff between two strings
#
sub lengthdiff {
  my $a = shift;
  my $b = shift;

  return abs(length($a)-length($b));
}

# edit distance
#
sub edist {
  my @a = split(//,shift);  # split strings into arrays
  my @b = split(//,shift);

  my $i, $j;

  my $m = (scalar @a)+1;  
  my $n = (scalar @b)+1;
  
  # allocate a table
  #
  my @table = maketable($m,$n,0);
  
  # init first row and column.
  #
  for ($i=1;$i<$m;$i++) {
    $table[$i][0]=$table[$i-1]+WD;
  }
  for ($j=1;$j<$n;$j++) {
    $table[0][$j]=$table[0][$j-1]+WD;
  }

  # fill in rest of table
  #
  for ($j=1;$j<$n;$j++) {
    for ($i=1;$i<$m;$i++) {
      $table[$i][$j]=min3(
	    $table[$i-1][$j]+WD,
        $table[$i][$j-1]+WD,
        $table[$i-1][$j-1]+(($a[$i-1] eq $b[$j-1])?WE:WR));
    }
  }

  return $table[$m-1][$n-1];
}

# initialize a 2d table , takes ($rows,$cols,$val)
#
sub maketable {
  my ($m,$n,$val)=@_;

  my @table;

  # init table to 2d, m*n
  #
  for (my $i=0;$i<$m;$i++) {
    my @row=();
	for (my $j=0;$j<$n;$j++) {
	  push @row,$val;
	}
	push @table,[@row];
  }
  
  return @table;
}

# get the minimum of 3 arguments
#
sub min3 {
  my ($a,$b,$c)=@_;

  my $t=($a<$b)?$a:$b;
  return ($t<$c)?$t:$c;
}

# get an array of "winners" that are all tied for the best score
#
sub getwinners1 {
  my $lexicon=shift;
  my $tophash=shift;
  my $reference=shift;  # reference string

  my @winners=();
  my $bestscore=999; 
  
  foreach my $id (keys %$tophash) {
	#my $dist=lengthdiff($lexicon->[$id],$reference)+gramdist($lexicon->[$id],$reference,$tophash->{$id});
	my $dist=gramdist($lexicon->[$id],$reference,$tophash->{$id});
	if ($dist <= $bestscore) {
	  @winners=() if ($dist < $bestscore);
	  push @winners,$id;
	  $bestscore=$dist;
	}
  }

  return ($bestscore,@winners);
}

# second round getwinners
#
sub getwinners2 {
  my $lexicon=shift;
  my $contenders=shift;
  my $reference=shift;   # reference string
  
  my @winners=();
  my $bestscore=999;

  foreach my $id (@$contenders) {
    my $dist=edist($lexicon->[$id],$reference);
	if ($dist <= $bestscore) {
	  @winners=() if ($dist < $bestscore);
	  push @winners,$id;
	  $bestscore=$dist;
	}
  }

  return ($bestscore,@winners);
}

# merge the postings lists into a hash of wordid=>gram count
#
sub mergepostings {
  my $idx=shift;
  my $word=shift;

  my %top;

  my @postings=getpostings($idx,$word);

  foreach my $post (@postings) {
	if (defined $top{$post}) {
      $top{$post}++;
	} else {
	  $top{$post}=1;
	}
  }

  return {%top};   # return the top hash
}

# get all the postings implied by the ngrams from a word
#
sub getpostings {
  my $idx=shift;
  my $word=shift;

  my @wids=();

  foreach my $ng (ngrams($word)) {
    if (defined $idx->{$ng}) {
	  push @wids,@{$idx->{$ng}};   # push postings list onto master list
	}
  }

  return @wids;
}

# distance metric that takes length difference and gram dist into account
#
sub distance {
  my $a=shift;
  my $b=shift;
  my $gramcount=shift;

  #return gramdist($a,$b,$gramcount);
  #return lengthdiff($a,$b)+gramdist($a,$b,$gramcount);
  #return edist($a,$b)+gramdist($a,$b,$gramcount);
  #return edist($a,$b);
  #return edist($a,$b)+lengthdiff($a,$b)+gramdist($a,$b,$gramcount);
}

# get the approximated Ukkonen gram-dist between two words
#
sub gramdist {
  my $a=shift;
  my $b=shift;
  my $gramcount=shift;   # the gram count (size of the set of n-grams common
                         # to both $a and $b)

  return grams($a)+grams($b)-2*$gramcount;
}

# get the count of ngrams for a word
#
sub grams {
  my $word=shift;

  my $l=length($word);

  return $l+1;
}

# main entry point for indexing a word
# 
sub indexngrams {
  my $idx=shift;
  my $reverse=shift;
  my $word=shift;

#  print "n-grams for $word: ";
  foreach my $ng (ngrams($word)) {
    addngram($idx,$reverse->{$word},$ng);
#    print "$ng ";
  }
#  print "\n";
}

# add an n-gram to the index
#
sub addngram {
  my $idx=shift;
  my $wid=shift; 
  my $ng=shift;

  if (not defined $idx->{$ng}) {
    $idx->{$ng}=[$wid];       # create a new postings list
    #print "creating postings for $ng (with $wid)\n";
  } else {                     
    push @{$idx->{$ng}},$wid; # push onto existing postings list
    #print "adding posting $wid to $ng\n";
  }
}

# get all the ngrams of an (augmented) word
#
sub ngrams {
  my $word=shift;

  # transform the word.  we add a special character for "beggining of word",
  # and duplicate the first part so that the word is "circular".  for example,
  # "cauchy" would become "cauchy|ca" for 3-grams
  #
  $word=$word.'|';
  $word.=substr $word,0,NGSIZE()-1;

  my @list=();
  
  foreach my $i (0..(length($word)-NGSIZE())) {
    push @list, substr $word,$i,NGSIZE;
  }

  return @list;
}

# add all a title's words to the dictionary
#
sub addtitle {
  my $dict = shift;
  my $reverse = shift;
  my $title = shift;

  foreach my $word (titlewords($title)) {
    addtodict($dict,$reverse,$word);
  }
}

# add a word to the dictionary if its not in there (use reverse for quick find)
#
sub addtodict {
  my $dict=shift;
  my $reverse=shift;
  my $word=shift;;

  return if ($word=~/^\s*$/);
  return if (exists $reverse->{$word});

  #print "  $word\n";

  push @$dict,$word;
  $reverse->{$word}=(scalar @$dict)-1;
}

# return word without possessive suffix ("Euler's" becomes "Euler")
#
sub getnonpossessive {
  my $word=shift;

  my @words=split(' ',$word);
  $words[0]=~s/'s$//;
  $words[0]=~s/s'$/s/;

  return join(' ',@words);
}

# get the canonical form list (lower cased, depossessivized) of title words
#
sub titlewords {
  my $title = lc(shift);

  $title =~ s/[\-\)\(]/ /g;
  $title =~ s/[,;]/ /g;
  $title =~ s/^\s*//;
  $title =~ s/\s*$//;
  return map getnonpossessive($_),split(/\s+/,$title); 
}
		  

